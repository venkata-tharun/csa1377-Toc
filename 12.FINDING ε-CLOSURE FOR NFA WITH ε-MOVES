#include <stdio.h>
#include <string.h>

int trans_table[10][5][3];
char symbol[5];
int e_closure[10][10], ptr, state;

void find_e_closure(int x);

int main() {
    int i, j, k, n, num_states, num_symbols;

    // Initialize transition table to -1
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 5; j++) {
            for (k = 0; k < 3; k++) {
                trans_table[i][j][k] = -1;
            }
        }
    }

    printf("How many states in the NFA with e-moves: ");
    scanf("%d", &num_states);

    printf("How many symbols in the input alphabet including e: ");
    scanf("%d", &num_symbols);

    printf("Enter the symbols without space. Give 'e' first: ");
    scanf("%s", symbol);

    for (i = 0; i < num_states; i++) {
        for (j = 0; j < num_symbols; j++) {
            printf("How many transitions from state %d for the input %c: ", i, symbol[j]);
            scanf("%d", &n);

            for (k = 0; k < n; k++) {
                printf("Enter the transition %d from state %d for the input %c: ", k + 1, i, symbol[j]);
                scanf("%d", &trans_table[i][j][k]);
            }
        }
    }

    // Initialize e-closure array to -1
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            e_closure[i][j] = -1;
        }
    }

    // Initialize e-closure of each state to include the state itself
    for (i = 0; i < num_states; i++) {
        e_closure[i][0] = i;
    }

    // Calculate e-closure for each state
    for (i = 0; i < num_states; i++) {
        if (trans_table[i][0][0] != -1) {
            state = i;
            ptr = 1;
            find_e_closure(i);
        }
    }

    // Print e-closures
    for (i = 0; i < num_states; i++) {
        printf("e-closure(%d) = {", i);
        for (j = 0; j < num_states; j++) {
            if (e_closure[i][j] != -1) {
                printf("%d", e_closure[i][j]);
                if (e_closure[i][j + 1] != -1) {
                    printf(", ");
                }
            }
        }
        printf("}\n");
    }

    return 0;
}

void find_e_closure(int x) {
    int i = 0, y[10], num_trans;

    // Find all transitions for e-move from state x
    while (trans_table[x][0][i] != -1) {
        y[i] = trans_table[x][0][i];
        i++;
    }
    num_trans = i;

    // Add transitions to e-closure
    for (i = 0; i < num_trans; i++) {
        int new_state = y[i];

        // Check if new_state is already in e-closure
        int already_in_closure = 0;
        for (int j = 0; j < ptr; j++) {
            if (e_closure[state][j] == new_state) {
                already_in_closure = 1;
                break;
            }
        }

        // If not, add it and recursively find its e-closure
        if (!already_in_closure) {
            e_closure[state][ptr] = new_state;
            ptr++;
            find_e_closure(new_state);
        }
    }
}
